# Script de d√©ploiement Vercel pour Fin√©a Acad√©mie
# Usage: .\deploy.ps1 [backend|admin|both]

param(
    [Parameter(Mandatory=$false)]
    [ValidateSet("backend", "admin", "both")]
    [string]$Target = "both"
)

Write-Host "üöÄ D√©ploiement Vercel - Fin√©a Acad√©mie" -ForegroundColor Green
Write-Host "==========================================" -ForegroundColor Green

# V√©rifier si Vercel CLI est install√©
try {
    $vercelVersion = vercel --version
    Write-Host "‚úÖ Vercel CLI d√©tect√©: $vercelVersion" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Vercel CLI non trouv√©. Installation..." -ForegroundColor Red
    npm install -g vercel
}

# Fonction pour d√©ployer le backend
function Deploy-Backend {
    Write-Host "`nüîß D√©ploiement du Backend..." -ForegroundColor Yellow
    Set-Location "backend"
    
    # V√©rifier les variables d'environnement
    if (-not (Test-Path ".env")) {
        Write-Host "‚ö†Ô∏è  Fichier .env manquant. Cr√©ez-le avec les variables n√©cessaires." -ForegroundColor Yellow
        Write-Host "   Consultez env.example pour la structure." -ForegroundColor Yellow
    }
    
    # D√©ploiement
    try {
        vercel --prod --yes
        Write-Host "‚úÖ Backend d√©ploy√© avec succ√®s!" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors du d√©ploiement du backend" -ForegroundColor Red
        exit 1
    }
    
    Set-Location ".."
}

# Fonction pour d√©ployer le frontend admin
function Deploy-Admin {
    Write-Host "`nüé® D√©ploiement du Frontend Admin..." -ForegroundColor Yellow
    Set-Location "admin-dashboard"
    
    # Build du projet
    Write-Host "üì¶ Build du projet..." -ForegroundColor Blue
    npm run build
    
    if ($LASTEXITCODE -ne 0) {
        Write-Host "‚ùå Erreur lors du build" -ForegroundColor Red
        exit 1
    }
    
    # D√©ploiement
    try {
        vercel --prod --yes
        Write-Host "‚úÖ Frontend Admin d√©ploy√© avec succ√®s!" -ForegroundColor Green
    } catch {
        Write-Host "‚ùå Erreur lors du d√©ploiement du frontend admin" -ForegroundColor Red
        exit 1
    }
    
    Set-Location ".."
}

# Fonction pour tester les endpoints
function Test-Endpoints {
    Write-Host "`nüß™ Test des endpoints..." -ForegroundColor Yellow
    
    # R√©cup√©rer l'URL du backend depuis Vercel
    $backendUrl = vercel ls --json | ConvertFrom-Json | Where-Object { $_.name -like "*backend*" } | Select-Object -First 1
    
    if ($backendUrl) {
        Write-Host "üîó URL du backend: $($backendUrl.url)" -ForegroundColor Blue
        
        # Test de l'endpoint health
        try {
            $response = Invoke-RestMethod -Uri "$($backendUrl.url)/api/health" -Method GET
            Write-Host "‚úÖ Endpoint /api/health: OK" -ForegroundColor Green
        } catch {
            Write-Host "‚ùå Endpoint /api/health: √âCHEC" -ForegroundColor Red
        }
    }
}

# Ex√©cution selon le param√®tre
switch ($Target) {
    "backend" {
        Deploy-Backend
    }
    "admin" {
        Deploy-Admin
    }
    "both" {
        Deploy-Backend
        Deploy-Admin
        Test-Endpoints
    }
}

Write-Host "`nüéâ D√©ploiement termin√©!" -ForegroundColor Green
Write-Host "üìã Prochaines √©tapes:" -ForegroundColor Blue
Write-Host "   1. Configurez les variables d'environnement dans Vercel" -ForegroundColor White
Write-Host "   2. Testez les endpoints de l'API" -ForegroundColor White
Write-Host "   3. V√©rifiez le dashboard admin" -ForegroundColor White
Write-Host "   4. Mettez √† jour l'URL de l'API dans l'app Flutter" -ForegroundColor White 