const axios = require('axios');

// Configuration
const API_BASE_URL = 'http://localhost:5000/api';
const PRODUCTION_URL = 'https://finea-api-production.up.railway.app/api';

// Utiliser l'URL locale par d√©faut, production en option
const baseURL = process.env.USE_PRODUCTION === 'true' ? PRODUCTION_URL : API_BASE_URL;

console.log(`üîç Test des notifications push sur: ${baseURL}`);

// Tests des notifications push
async function testPushNotifications() {
  console.log('\nüì± === TEST DES NOTIFICATIONS PUSH ===\n');

  try {
    // Test 1: V√©rifier que l'API est accessible
    console.log('1Ô∏è‚É£ Test de connectivit√© API...');
    const healthResponse = await axios.get(`${baseURL}/health`);
    if (healthResponse.data.success) {
      console.log('‚úÖ API accessible');
    } else {
      throw new Error('API non accessible');
    }

    // Test 2: V√©rifier les statistiques des notifications push
    console.log('\n2Ô∏è‚É£ Test des statistiques push...');
    const statsResponse = await axios.get(`${baseURL}/push-notifications/stats`);
    console.log('üìä Statistiques des notifications push:');
    console.log(`   - Total envoy√©es: ${statsResponse.data.data.totalPushNotifications || 0}`);
    console.log(`   - Appareils connect√©s: ${statsResponse.data.data.totalDevicesWithTokens || 0}`);
    console.log(`   - Succ√®s: ${statsResponse.data.data.sentNotifications || 0}`);
    console.log(`   - √âchecs: ${statsResponse.data.data.failedNotifications || 0}`);

    // Test 3: V√©rifier les appareils enregistr√©s
    console.log('\n3Ô∏è‚É£ Test de la liste des appareils...');
    const devicesResponse = await axios.get(`${baseURL}/push-notifications/devices?limit=5`);
    console.log(`üì± ${devicesResponse.data.data.length} appareils trouv√©s:`);
    devicesResponse.data.data.forEach((device, index) => {
      console.log(`   ${index + 1}. ${device.userName} (${device.userEmail})`);
      device.devices.forEach(dev => {
        console.log(`      - ${dev.platform} (actif: ${dev.isActive})`);
      });
    });

    // Test 4: Envoyer une notification de test globale
    console.log('\n4Ô∏è‚É£ Test d\'envoi de notification globale...');
    const testNotification = {
      title: 'üß™ Test Notification Push',
      message: 'Ceci est un test automatique du syst√®me de notifications push !',
      type: 'test',
      priority: 'normal',
      isGlobal: true,
      data: {
        test: true,
        timestamp: new Date().toISOString()
      }
    };

    const sendResponse = await axios.post(`${baseURL}/push-notifications/send`, testNotification);
    
    if (sendResponse.data.success) {
      console.log('‚úÖ Notification de test envoy√©e !');
      console.log(`   - Succ√®s: ${sendResponse.data.data.successCount || 0}`);
      console.log(`   - √âchecs: ${sendResponse.data.data.failureCount || 0}`);
      console.log(`   - Total: ${sendResponse.data.data.totalSent || 0}`);
    } else {
      console.log('‚ùå Erreur lors de l\'envoi:', sendResponse.data.error);
    }

    // Test 5: V√©rifier les routes de notifications classiques
    console.log('\n5Ô∏è‚É£ Test des notifications classiques...');
    const notificationsResponse = await axios.get(`${baseURL}/notifications?limit=3`);
    console.log(`üìã ${notificationsResponse.data.data.length} notifications trouv√©es`);

    console.log('\nüéâ === TESTS TERMIN√âS AVEC SUCC√àS ===');
    console.log('\nüì± Le syst√®me de notifications push est op√©rationnel !');
    console.log('   Pour tester compl√®tement:');
    console.log('   1. Ouvrez l\'app Flutter sur un t√©l√©phone');
    console.log('   2. V√©rifiez que l\'appareil appara√Æt dans la liste');
    console.log('   3. Envoyez une notification depuis l\'admin dashboard');
    console.log('   4. V√©rifiez qu\'elle arrive sur le t√©l√©phone');

  } catch (error) {
    console.error('\n‚ùå === ERREUR LORS DES TESTS ===');
    
    if (error.response) {
      console.error(`Status: ${error.response.status}`);
      console.error(`Erreur: ${error.response.data?.error || error.response.data?.message || 'Erreur inconnue'}`);
    } else if (error.request) {
      console.error('Pas de r√©ponse du serveur. V√©rifiez que le backend est d√©marr√©.');
      console.error('Commande: cd backend && npm start');
    } else {
      console.error('Erreur:', error.message);
    }
    
    console.log('\nüîß Solutions possibles:');
    console.log('   1. V√©rifier que le backend est d√©marr√© (npm start)');
    console.log('   2. V√©rifier l\'URL dans ce script');
    console.log('   3. V√©rifier la configuration Firebase');
    console.log('   4. Consulter les logs du backend');
  }
}

// Test des routes de base
async function testBasicRoutes() {
  console.log('\nüåê === TEST DES ROUTES DE BASE ===\n');
  
  const routes = [
    { name: 'Health Check', path: '/health' },
    { name: 'Users', path: '/users?limit=1' },
    { name: 'Notifications', path: '/notifications?limit=1' },
    { name: 'Push Stats', path: '/push-notifications/stats' },
    { name: 'Push Devices', path: '/push-notifications/devices?limit=1' },
  ];

  for (const route of routes) {
    try {
      const response = await axios.get(`${baseURL}${route.path}`);
      console.log(`‚úÖ ${route.name}: OK (${response.status})`);
    } catch (error) {
      console.log(`‚ùå ${route.name}: Erreur (${error.response?.status || 'Network Error'})`);
    }
  }
}

// Fonction principale
async function runTests() {
  console.log('üöÄ === TESTS DU SYST√àME DE NOTIFICATIONS PUSH FIN√âA ACAD√âMIE ===');
  console.log(`‚è∞ ${new Date().toLocaleString('fr-FR')}\n`);

  // Test des routes de base
  await testBasicRoutes();
  
  // Test des notifications push
  await testPushNotifications();
  
  console.log('\n‚ú® Tests termin√©s !');
  console.log('\nüìñ Pour plus d\'informations, consultez NOTIFICATIONS_PUSH_GUIDE.md');
}

// Ex√©cuter les tests
if (require.main === module) {
  runTests().catch(console.error);
}

module.exports = { testPushNotifications, testBasicRoutes, runTests };
